// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Articles", testArticles)
	t.Run("ClickbaitLabels", testClickbaitLabels)
	t.Run("SummaryLabels", testSummaryLabels)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Articles", testArticlesDelete)
	t.Run("ClickbaitLabels", testClickbaitLabelsDelete)
	t.Run("SummaryLabels", testSummaryLabelsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Articles", testArticlesQueryDeleteAll)
	t.Run("ClickbaitLabels", testClickbaitLabelsQueryDeleteAll)
	t.Run("SummaryLabels", testSummaryLabelsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Articles", testArticlesSliceDeleteAll)
	t.Run("ClickbaitLabels", testClickbaitLabelsSliceDeleteAll)
	t.Run("SummaryLabels", testSummaryLabelsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Articles", testArticlesExists)
	t.Run("ClickbaitLabels", testClickbaitLabelsExists)
	t.Run("SummaryLabels", testSummaryLabelsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Articles", testArticlesFind)
	t.Run("ClickbaitLabels", testClickbaitLabelsFind)
	t.Run("SummaryLabels", testSummaryLabelsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Articles", testArticlesBind)
	t.Run("ClickbaitLabels", testClickbaitLabelsBind)
	t.Run("SummaryLabels", testSummaryLabelsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Articles", testArticlesOne)
	t.Run("ClickbaitLabels", testClickbaitLabelsOne)
	t.Run("SummaryLabels", testSummaryLabelsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Articles", testArticlesAll)
	t.Run("ClickbaitLabels", testClickbaitLabelsAll)
	t.Run("SummaryLabels", testSummaryLabelsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Articles", testArticlesCount)
	t.Run("ClickbaitLabels", testClickbaitLabelsCount)
	t.Run("SummaryLabels", testSummaryLabelsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Articles", testArticlesHooks)
	t.Run("ClickbaitLabels", testClickbaitLabelsHooks)
	t.Run("SummaryLabels", testSummaryLabelsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Articles", testArticlesInsert)
	t.Run("Articles", testArticlesInsertWhitelist)
	t.Run("ClickbaitLabels", testClickbaitLabelsInsert)
	t.Run("ClickbaitLabels", testClickbaitLabelsInsertWhitelist)
	t.Run("SummaryLabels", testSummaryLabelsInsert)
	t.Run("SummaryLabels", testSummaryLabelsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("ClickbaitLabelToArticleUsingArticle", testClickbaitLabelToOneArticleUsingArticle)
	t.Run("ClickbaitLabelToUserUsingUser", testClickbaitLabelToOneUserUsingUser)
	t.Run("SummaryLabelToArticleUsingArticle", testSummaryLabelToOneArticleUsingArticle)
	t.Run("SummaryLabelToUserUsingUser", testSummaryLabelToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ArticleToClickbaitLabels", testArticleToManyClickbaitLabels)
	t.Run("ArticleToSummaryLabels", testArticleToManySummaryLabels)
	t.Run("UserToClickbaitLabels", testUserToManyClickbaitLabels)
	t.Run("UserToSummaryLabels", testUserToManySummaryLabels)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("ClickbaitLabelToArticleUsingClickbaitLabels", testClickbaitLabelToOneSetOpArticleUsingArticle)
	t.Run("ClickbaitLabelToUserUsingClickbaitLabels", testClickbaitLabelToOneSetOpUserUsingUser)
	t.Run("SummaryLabelToArticleUsingSummaryLabels", testSummaryLabelToOneSetOpArticleUsingArticle)
	t.Run("SummaryLabelToUserUsingSummaryLabels", testSummaryLabelToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ArticleToClickbaitLabels", testArticleToManyAddOpClickbaitLabels)
	t.Run("ArticleToSummaryLabels", testArticleToManyAddOpSummaryLabels)
	t.Run("UserToClickbaitLabels", testUserToManyAddOpClickbaitLabels)
	t.Run("UserToSummaryLabels", testUserToManyAddOpSummaryLabels)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Articles", testArticlesReload)
	t.Run("ClickbaitLabels", testClickbaitLabelsReload)
	t.Run("SummaryLabels", testSummaryLabelsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Articles", testArticlesReloadAll)
	t.Run("ClickbaitLabels", testClickbaitLabelsReloadAll)
	t.Run("SummaryLabels", testSummaryLabelsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Articles", testArticlesSelect)
	t.Run("ClickbaitLabels", testClickbaitLabelsSelect)
	t.Run("SummaryLabels", testSummaryLabelsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Articles", testArticlesUpdate)
	t.Run("ClickbaitLabels", testClickbaitLabelsUpdate)
	t.Run("SummaryLabels", testSummaryLabelsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Articles", testArticlesSliceUpdateAll)
	t.Run("ClickbaitLabels", testClickbaitLabelsSliceUpdateAll)
	t.Run("SummaryLabels", testSummaryLabelsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}

// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSummaryLabels(t *testing.T) {
	t.Parallel()

	query := SummaryLabels()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSummaryLabelsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SummaryLabel{}
	if err = randomize.Struct(seed, o, summaryLabelDBTypes, true, summaryLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SummaryLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SummaryLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSummaryLabelsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SummaryLabel{}
	if err = randomize.Struct(seed, o, summaryLabelDBTypes, true, summaryLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SummaryLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SummaryLabels().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SummaryLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSummaryLabelsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SummaryLabel{}
	if err = randomize.Struct(seed, o, summaryLabelDBTypes, true, summaryLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SummaryLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SummaryLabelSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SummaryLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSummaryLabelsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SummaryLabel{}
	if err = randomize.Struct(seed, o, summaryLabelDBTypes, true, summaryLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SummaryLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SummaryLabelExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SummaryLabel exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SummaryLabelExists to return true, but got false.")
	}
}

func testSummaryLabelsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SummaryLabel{}
	if err = randomize.Struct(seed, o, summaryLabelDBTypes, true, summaryLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SummaryLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	summaryLabelFound, err := FindSummaryLabel(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if summaryLabelFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSummaryLabelsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SummaryLabel{}
	if err = randomize.Struct(seed, o, summaryLabelDBTypes, true, summaryLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SummaryLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SummaryLabels().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSummaryLabelsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SummaryLabel{}
	if err = randomize.Struct(seed, o, summaryLabelDBTypes, true, summaryLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SummaryLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SummaryLabels().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSummaryLabelsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	summaryLabelOne := &SummaryLabel{}
	summaryLabelTwo := &SummaryLabel{}
	if err = randomize.Struct(seed, summaryLabelOne, summaryLabelDBTypes, false, summaryLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SummaryLabel struct: %s", err)
	}
	if err = randomize.Struct(seed, summaryLabelTwo, summaryLabelDBTypes, false, summaryLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SummaryLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = summaryLabelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = summaryLabelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SummaryLabels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSummaryLabelsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	summaryLabelOne := &SummaryLabel{}
	summaryLabelTwo := &SummaryLabel{}
	if err = randomize.Struct(seed, summaryLabelOne, summaryLabelDBTypes, false, summaryLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SummaryLabel struct: %s", err)
	}
	if err = randomize.Struct(seed, summaryLabelTwo, summaryLabelDBTypes, false, summaryLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SummaryLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = summaryLabelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = summaryLabelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SummaryLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func summaryLabelBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SummaryLabel) error {
	*o = SummaryLabel{}
	return nil
}

func summaryLabelAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SummaryLabel) error {
	*o = SummaryLabel{}
	return nil
}

func summaryLabelAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SummaryLabel) error {
	*o = SummaryLabel{}
	return nil
}

func summaryLabelBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SummaryLabel) error {
	*o = SummaryLabel{}
	return nil
}

func summaryLabelAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SummaryLabel) error {
	*o = SummaryLabel{}
	return nil
}

func summaryLabelBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SummaryLabel) error {
	*o = SummaryLabel{}
	return nil
}

func summaryLabelAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SummaryLabel) error {
	*o = SummaryLabel{}
	return nil
}

func summaryLabelBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SummaryLabel) error {
	*o = SummaryLabel{}
	return nil
}

func summaryLabelAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SummaryLabel) error {
	*o = SummaryLabel{}
	return nil
}

func testSummaryLabelsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SummaryLabel{}
	o := &SummaryLabel{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, summaryLabelDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SummaryLabel object: %s", err)
	}

	AddSummaryLabelHook(boil.BeforeInsertHook, summaryLabelBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	summaryLabelBeforeInsertHooks = []SummaryLabelHook{}

	AddSummaryLabelHook(boil.AfterInsertHook, summaryLabelAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	summaryLabelAfterInsertHooks = []SummaryLabelHook{}

	AddSummaryLabelHook(boil.AfterSelectHook, summaryLabelAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	summaryLabelAfterSelectHooks = []SummaryLabelHook{}

	AddSummaryLabelHook(boil.BeforeUpdateHook, summaryLabelBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	summaryLabelBeforeUpdateHooks = []SummaryLabelHook{}

	AddSummaryLabelHook(boil.AfterUpdateHook, summaryLabelAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	summaryLabelAfterUpdateHooks = []SummaryLabelHook{}

	AddSummaryLabelHook(boil.BeforeDeleteHook, summaryLabelBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	summaryLabelBeforeDeleteHooks = []SummaryLabelHook{}

	AddSummaryLabelHook(boil.AfterDeleteHook, summaryLabelAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	summaryLabelAfterDeleteHooks = []SummaryLabelHook{}

	AddSummaryLabelHook(boil.BeforeUpsertHook, summaryLabelBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	summaryLabelBeforeUpsertHooks = []SummaryLabelHook{}

	AddSummaryLabelHook(boil.AfterUpsertHook, summaryLabelAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	summaryLabelAfterUpsertHooks = []SummaryLabelHook{}
}

func testSummaryLabelsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SummaryLabel{}
	if err = randomize.Struct(seed, o, summaryLabelDBTypes, true, summaryLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SummaryLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SummaryLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSummaryLabelsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SummaryLabel{}
	if err = randomize.Struct(seed, o, summaryLabelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SummaryLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(summaryLabelColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SummaryLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSummaryLabelToOneArticleUsingArticle(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SummaryLabel
	var foreign Article

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, summaryLabelDBTypes, false, summaryLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SummaryLabel struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, articleDBTypes, false, articleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Article struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ArticleID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Article().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SummaryLabelSlice{&local}
	if err = local.L.LoadArticle(ctx, tx, false, (*[]*SummaryLabel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Article == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Article = nil
	if err = local.L.LoadArticle(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Article == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSummaryLabelToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SummaryLabel
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, summaryLabelDBTypes, false, summaryLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SummaryLabel struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SummaryLabelSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*SummaryLabel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSummaryLabelToOneSetOpArticleUsingArticle(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SummaryLabel
	var b, c Article

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, summaryLabelDBTypes, false, strmangle.SetComplement(summaryLabelPrimaryKeyColumns, summaryLabelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, articleDBTypes, false, strmangle.SetComplement(articlePrimaryKeyColumns, articleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, articleDBTypes, false, strmangle.SetComplement(articlePrimaryKeyColumns, articleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Article{&b, &c} {
		err = a.SetArticle(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Article != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SummaryLabels[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ArticleID != x.ID {
			t.Error("foreign key was wrong value", a.ArticleID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ArticleID))
		reflect.Indirect(reflect.ValueOf(&a.ArticleID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ArticleID != x.ID {
			t.Error("foreign key was wrong value", a.ArticleID, x.ID)
		}
	}
}
func testSummaryLabelToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SummaryLabel
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, summaryLabelDBTypes, false, strmangle.SetComplement(summaryLabelPrimaryKeyColumns, summaryLabelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SummaryLabels[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testSummaryLabelsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SummaryLabel{}
	if err = randomize.Struct(seed, o, summaryLabelDBTypes, true, summaryLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SummaryLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSummaryLabelsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SummaryLabel{}
	if err = randomize.Struct(seed, o, summaryLabelDBTypes, true, summaryLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SummaryLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SummaryLabelSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSummaryLabelsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SummaryLabel{}
	if err = randomize.Struct(seed, o, summaryLabelDBTypes, true, summaryLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SummaryLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SummaryLabels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	summaryLabelDBTypes = map[string]string{`ID`: `character varying`, `UserID`: `character varying`, `ArticleID`: `character varying`, `Value`: `text`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`}
	_                   = bytes.MinRead
)

func testSummaryLabelsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(summaryLabelPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(summaryLabelAllColumns) == len(summaryLabelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SummaryLabel{}
	if err = randomize.Struct(seed, o, summaryLabelDBTypes, true, summaryLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SummaryLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SummaryLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, summaryLabelDBTypes, true, summaryLabelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SummaryLabel struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSummaryLabelsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(summaryLabelAllColumns) == len(summaryLabelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SummaryLabel{}
	if err = randomize.Struct(seed, o, summaryLabelDBTypes, true, summaryLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SummaryLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SummaryLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, summaryLabelDBTypes, true, summaryLabelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SummaryLabel struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(summaryLabelAllColumns, summaryLabelPrimaryKeyColumns) {
		fields = summaryLabelAllColumns
	} else {
		fields = strmangle.SetComplement(
			summaryLabelAllColumns,
			summaryLabelPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SummaryLabelSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSummaryLabelsUpsert(t *testing.T) {
	t.Parallel()

	if len(summaryLabelAllColumns) == len(summaryLabelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SummaryLabel{}
	if err = randomize.Struct(seed, &o, summaryLabelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SummaryLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SummaryLabel: %s", err)
	}

	count, err := SummaryLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, summaryLabelDBTypes, false, summaryLabelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SummaryLabel struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SummaryLabel: %s", err)
	}

	count, err = SummaryLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
